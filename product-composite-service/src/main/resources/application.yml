springdoc:
  swagger-ui.path: /openapi/swagger-ui.html
  api-docs.path: /openapi/v3/api-docs
  packagesToScan:
    - com.smithjilks.microservices.composite.product
  pathsToMatch:
    - /**

api:
  common:
    version: 1.0.0
    title: Example API
    description: Description of Example API
    termsOfService: Example API Terms of Service
    license: Example API LICENSE
    licenseUrl: EXAMPLE API LICENSE URL

    externalDocDesc: EXAMPLE API WIKI PAGE
    externalDocUrl: EXAMPLE API EXTERNAL DOC URL
    contact:
      name: NAME OF CONTACT
      url: URL TO CONTACT
      email: contact@example.com

  responseCodes:
    ok.description: OK
    badRequest.description: Bad Request, invalid format of the request. See response message for more information.
    notFound.description: Not found, the specified id does not exist
    unprocessableEntity.description: Unprocessable Entity, input parameters caused the processing to fail. See response message for more information

  product-composite:
    get-composite-product:
      description: Resturns a composite view of the specified product id
      notes: |
        # Normal response
        If the requested product id is found the method will return information regarding:
        1. Base product information
        2. Reviews 
        3. Recommendations
        4. Service Addresses\n(technical information regarding the addresses of the microservices that create the response)
        
        # Expected partial and error responses
        1. If no product information is found, a **404 - Not Found** error will be returned
        2. In no recommendations or reviews are found for a product, a partial response will be returned

    create-composite-product:
      description: Creates a composite product
      notes: |
        # Normal response
        The composite product information posted to the API will be split up and stored as separate product-info, recommendation and review entities.

        # Expected error responses
        1. If a product with the same productId as specified in the posted information already exists,
           an **422 - Unprocessable Entity** error with a "duplicate key" error message will be returned

    delete-composite-product:
      description: Deletes a product composite
      notes: |
        # Normal response
        Entities for product information, recommendations and reviews related to the specified productId will be deleted.
        The implementation of the delete method is idempotent, i.e. it can be called several times with the same response.

        This means that a delete request of a non-existing product will return **200 Ok**.


server.port: 7000
server.error.include-message: always

app:
  product-service:
    host: localhost
    port: 7001
  recommendation-service:
    host: localhost
    port: 7002
  review-service:
    host: localhost
    port: 7003

logging:
  level:
    root: INFO
    com.smithjilks.microservices: DEBUG


---
spring.config.activate.on-profile: docker

server.port: 8080

app:
  product-service:
    host: product
    port: 8080
  recommendation-service:
    host: recommendation
    port: 8080
  review-service:
    host: review
    port: 8080
